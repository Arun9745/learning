React  its two types
 . function components
 . Class Components

Function Components
    function name(){
    return()
    }

Class Components
    class name extends react.component{
    render(
    return()
    )
    }


Arrow function
It is mainly used in project comparing to function and class components.
Example:
     const Apple = (props) => {
     const{appleinfo}= props;
     const{color,type}=appleinfo;
     return(
         <h2>I am {color} {type} apple</h2>
     )
}



Properties(props)
  props is used to assin a value to components by directly.



Conditional Rendering
return(
        <>
        <h1>Who lives inside my Garage </h1>
        {carinfo.brand !== undefined && carinfo.brand !==undefined ?
        <Car carinfo={carinfo} /> : null}
        <Apple appleinfo={appleinfo} />
        {dooropened?<h2> The door is opened</h2>: <h2> The door is not opened</h2>}
        </>
    );

List keys

function Garage() {
  const carinfo={color: "red",brand:"ford"};
  const appleinfo={color: "green",type:"fruit"};
  const dooropened=false;
  const carlist=[
      {brand: "BMW" ,color: "Red"},
      {brand: "Ford" ,color: "White"},
      {brand: "Tesla" ,color: "blue"},
  ]
  const numberlist=[1,2,3,4,5,6];
  //const carinfo={}
  return(
      <>
      <h1>Who lives inside my Garage </h1>
      {carinfo.brand !== undefined && carinfo.brand !==undefined ?
      <Car carinfo={carinfo} /> : null}
      <Apple appleinfo={appleinfo} />
      {dooropened?<h2> The door is opened</h2>: <h2> The door is not opened</h2>}
      <ul>
          { carlist.map((carinfo) =><li><Car carinfo={carinfo}/>  </li>)}
              </ul>
              <ul>{
              numberlist.map((e,index)=> <p key={index}>{e}</p>)}</ul>
      </>
  );
}


React router
 It is used to avoid the refresh page for that using link tag.
   Example: <li><Link to='/'>Home</Link></li>

React router using BrowserRouter,Routes,Route for change into another page by clicking the link.
   Example:
   <BrowserRouter>
   <ul>
      <li><Link to='/'>Home</Link></li>
      <li><Link to='/about'>About</Link></li>
      <li><Link to='/contact-us'>Contact-us</Link></li>
    </ul>
     <Routes>
      <Route path='/' element={<Home />} />
      <Route path='/about' element={<About />} />
      <Route path='/contact-us' element={<Contact />} />
     </Routes>
      </BrowserRouter>


Route Parameters
 It is used to show the user id easily by using route method and : .
 Example:
  <Route path='/User/:id' element={<User />} />
And using useparams for getting parameters from parent components.


Nested Routes
  It is used to create a route inside a another route by a parent class and child class.
  Example:
    <Route path='/books'>
        <Route path='oldbooks' element={<User />} />
        <Route path='newbooks' element={<User />} />
        </Route>

Navigating Programmatically
 It is used to navigate a component from one class to another class,bby using usenavigate
  Example:
  export default function Login() {
const navigate =useNavigate();

function onSubmit(){
navigate('/dashboard')
}

return <>
<h1>Login page</h1>
<button onClick={onSubmit}>login</button>
</>
}

React Hooks

Basic hooks:
  *useState
  *useEffect
  *useContext


1.useState
  The usestate is used to increment or decrement a value in a app function.
   Example:
   const App = () => {
      const [counter, SetCounter]=useState(0);

    function DecreaseCounter() {
      SetCounter(counter-1);
   }

  return (
  <div>
    <h1>Counter: {counter}</h1>
      <button onClick={DecreaseCounter}>Decrease</button>

  </div>
  )
  }

2.useEffect
  It is mainly used in project for side effects,it is advanced than usestate
useEffect is used directly for mounted,for demounted is used in return function.
Example:
import React, {useState,useEffect} from "react";

const App = () =>{
const[count,setCount]=useState(0);
const[msg,setMsg]=useState('Initial message');

useEffect(() =>{
   console.log('compund mounted/ updated');
   console.log(msg);
   console.log('count is increased to',count);
},[count,msg])

return(
<div>
   <button onClick={() =>{setCount(count+1)}}>Increase</button>
   <p>The count is :{count}</p>
   <button onClick={() =>{setMsg('msg updated on click event')}}>update message</button>
</div>
)
};

export default App;



3.useEffect with Cleanup Method.
  This component using useState Method

  import React,{useState} from "react";
 import CompA from "./CompA";

const Cleanup=() =>{
    const[toggle,setToggle]=useState(true);
    return(
        <div>
            <p>useEffect with Cleanup</p>
            <button onClick={()=>{setToggle(!toggle)}}>show/hide compA</button>
            {toggle ? <CompA />: null}
        </div>
    )
}

export default Cleanup;


This component using useEffect method.

import react, {useEffect} from 'react';

const CompA=() =>{

    useEffect(() =>{
      //Effect goes here
      console.log('Effect goes here');
       const timerId = setInterval(() =>{
        console.log('API call executed')
       },2000);

      return() =>{
        //Cleanup goes here
        console.log('Cleanup goes here');
        clearInterval(timerId);
      }
    },[]);

    return(
        <div>
            <p>component A</p>
            <hr />
        </div>
    )
};

export default CompA;


4.useMemo
  It is used to react perform optimaization. Its stores the value

  Example:
  import React,{useState,useMemo} from "react";


const Counter=() =>{
  const[number,SetNumber]=useState(1);

  const factorialOf = (n) => {
      console.log('inside factorialOf method');
      let result=1;
      if(n <=1){
          return result;
      }else{
          for(let i=n;i >=1;i--){
              result=result * i;
          }
          return result;
      }
  }

 // const factorial=factorialOf(number)
    const factorial=useMemo(() =>{factorialOf(number)},[number]);


  return(
      <div>
          <p>Find the factorial of the given number</p>
          <input type="text" placeholder="Enter the number" onChange={(e) => {SetNumber(e.targett.value)}} />
          <br />
          <span>Factrial of the given number is {factorial} </span>
          </div>
  )
}

export default Counter;

5.useContext
   It is used to overcome a another component.
    Example:
     import React,{createContext,useContext,useState} from "react";

     const UserContext =createContext();
     export default function -----(){
     const [user]=useState("Arun");
     return(
     <UserContext.Provider value={user}>
     <h1>----</h1>
     </>
     </UserContext.Provider>
     )
     }

6.useCallback

 It is used to call back the value by const method.
   Example:
     const Increment =useCallback(()=>{
     setCount(---------)
     },[count])
